diff --git a/Makefile b/Makefile
index 39a99d7..aa99c08 100644
--- a/Makefile
+++ b/Makefile
@@ -118,8 +118,11 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h
 UPROGS=\
 	$U/_cat\
 	$U/_echo\
+	$U/_exit\
 	$U/_forktest\
 	$U/_grep\
+	$U/_grind\
+	$U/_history\
 	$U/_init\
 	$U/_kill\
 	$U/_ln\
@@ -128,8 +131,8 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_trace\
 	$U/_usertests\
-	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
 
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..5bc1f7f 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct syscall_stat;
 
 // bio.c
 void            binit(void);
@@ -124,6 +125,9 @@ void            releasesleep(struct sleeplock*);
 int             holdingsleep(struct sleeplock*);
 void            initsleeplock(struct sleeplock*, char*);
 
+// start.c
+void            stopqemu();
+
 // string.c
 int             memcmp(const void*, const void*, uint);
 void*           memmove(void*, const void*, uint);
@@ -137,9 +141,11 @@ char*           strncpy(char*, const char*, int);
 void            argint(int, int*);
 int             argstr(int, char*, int);
 void            argaddr(int, uint64 *);
+void            argsyscallstat(int, int, int);
 int             fetchstr(uint64, char*, int);
 int             fetchaddr(uint64, uint64*);
 void            syscall();
+void            initsyscalllocks();
 
 // trap.c
 extern uint     ticks;
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index fb31b32..7d48405 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -97,11 +97,17 @@ timervec:
         # scratch[0,8,16] : register save area.
         # scratch[24] : address of CLINT's MTIMECMP register.
         # scratch[32] : desired interval between interrupts.
+        # scratch[40] : machine exit flag 
         
         csrrw a0, mscratch, a0
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
+        
+        # stop qemu if machine exit flag is 1
+
+        ld a1, 40(a0)
+        bne a1, zero, stopqemu
 
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
@@ -122,3 +128,12 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+
+stopqemu:
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
+
+spin:
+        j spin
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..d174cda 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -29,6 +29,7 @@ main()
     fileinit();      // file table
     virtio_disk_init(); // emulated hard disk
     userinit();      // first user process
+    initsyscalllocks();
     __sync_synchronize();
     started = 1;
   } else {
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..2500599 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -124,6 +124,7 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->n_trace = -1;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -160,6 +161,7 @@ freeproc(struct proc *p)
   p->trapframe = 0;
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
+  p->n_trace = -1;
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..612e1df 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int n_trace;                 // Call being traced
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..6d38172 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -11,7 +11,7 @@ void timerinit();
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -73,9 +73,11 @@ timerinit()
   // scratch[0..2] : space for timervec to save registers.
   // scratch[3] : address of CLINT MTIMECMP register.
   // scratch[4] : desired interval (in cycles) between timer interrupts.
+  // scrattch[5] : halt flad for timervec
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+  scratch[5] = 0;
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +89,8 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+
+void 
+stopqemu() {
+  timer_scratch[0][5] = 1;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..093f78e 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -6,6 +6,11 @@
 #include "proc.h"
 #include "syscall.h"
 #include "defs.h"
+#include "syscall_stat.h"
+
+int syscallargtype[6];
+int syscallargcnt = 0;
+char* syscallargstrbuf[6];
 
 // Fetch the uint64 at addr from the current process.
 int
@@ -57,6 +62,8 @@ void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+  syscallargcnt++;
+  syscallargtype[n] = ARG_INT;
 }
 
 // Retrieve an argument as a pointer.
@@ -66,6 +73,8 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+  syscallargcnt++;
+  syscallargtype[n] = ARG_ADDR;
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -76,6 +85,8 @@ argstr(int n, char *buf, int max)
 {
   uint64 addr;
   argaddr(n, &addr);
+  syscallargtype[n] = ARG_STR;
+  syscallargstrbuf[n] = buf;
   return fetchstr(addr, buf, max);
 }
 
@@ -101,6 +112,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
+extern uint64 sys_sysexit(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,22 +140,116 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history] sys_history,
+[SYS_sysexit] sys_sysexit,
+};
+
+char syscallname[NELEM(syscalls)][32] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_history] "history",
+[SYS_sysexit] "sysexit",
 };
 
+struct spinlock syscalllock[NELEM(syscalls)];
+int syscallcount[NELEM(syscalls)] = {0};
+uint syscalltime[NELEM(syscalls)];
+
+// Initialise system call locks
+void 
+initsyscalllocks() {
+  for (int i=0; i<NELEM(syscalls); i++) {
+    initlock(&syscalllock[i], "lock");
+  }
+}
+
+// Write to system call status struct argument
+void
+argsyscallstat (int proc_n, int n1, int n2) {
+  struct proc *p = myproc();
+  int n;
+  argint (n1, &n);
+  //printf("%s %d %d\n", (char*)(syscallname[n]), syscallcount[n], syscalltime[n]);
+  //struct syscall_stat *stat = (struct syscall_stat*) argraw(n2);
+  uint64 stat;
+  argaddr(n2, &stat);
+  struct syscall_stat data;
+  strncpy(data.syscall_name, syscallname[n], strlen(syscallname[n]));
+  data.syscall_name[strlen(syscallname[n])] = '\0';
+  data.count = syscallcount[n];
+  data.accum_time = syscalltime[n];
+  acquire(&syscalllock[proc_n]);
+  copyout(p->pagetable, stat, (char *)&data, sizeof(data));
+  release(&syscalllock[proc_n]);
+}
+
 void
 syscall(void)
 {
+  syscallargcnt = 0;
   int num;
   struct proc *p = myproc();
-
+  uint64 arg0 = p->trapframe->a0;
+  uint tick1, tick2;
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+    acquire(&tickslock);
+    tick1 = ticks;
+    release(&tickslock);
     p->trapframe->a0 = syscalls[num]();
+    acquire(&tickslock);
+    tick2 = ticks;
+    release(&tickslock);
+    // struct spinlock mylock;
+    acquire(&syscalllock[num]);
+    syscallcount[num]++;
+    syscalltime[num] += (tick2-tick1);
+    release(&syscalllock[num]);
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
+
+  if (p->n_trace == num) {
+    printf ("pid: %d, syscall: %s, args: (", p->pid, syscallname[p->n_trace]);
+    for (int i=0; i<syscallargcnt; i++) {
+      uint64 arg = arg0;
+      if (i==1) arg = p->trapframe->a1;
+      else if (i==2) arg = p->trapframe->a2;
+      else if (i==3) arg = p->trapframe->a3;
+      else if (i==4) arg = p->trapframe->a4;
+      else if (i==5) arg = p->trapframe->a5;
+
+      if (syscallargtype[i] == ARG_INT) printf("%d", arg);
+      else if (syscallargtype[i] == ARG_ADDR) printf("%p", arg);
+      else if (syscallargtype[i] == ARG_STR) printf("%s", syscallargstrbuf[i]);
+      if (i < syscallargcnt-1) printf(", ");
+    }
+    printf ("), return: %d\n", p->trapframe->a0);
+  }
+
 }
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..67aa039 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,29 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork     1
+#define SYS_exit     2
+#define SYS_wait     3
+#define SYS_pipe     4
+#define SYS_read     5
+#define SYS_kill     6
+#define SYS_exec     7
+#define SYS_fstat    8
+#define SYS_chdir    9
+#define SYS_dup     10
+#define SYS_getpid  11
+#define SYS_sbrk    12
+#define SYS_sleep   13
+#define SYS_uptime  14
+#define SYS_open    15
+#define SYS_write   16
+#define SYS_mknod   17
+#define SYS_unlink  18
+#define SYS_link    19
+#define SYS_mkdir   20
+#define SYS_close   21
+#define SYS_trace   22
+#define SYS_history 23
+#define SYS_sysexit 24
+
+#define ARG_INT    420
+#define ARG_ADDR   421
+#define ARG_STR    422
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..b350a2f 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "syscall.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,35 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// trace call handler:
+uint64
+sys_trace(void) {
+  int n;
+  argint (0, &n);
+  myproc()->n_trace = n;
+  return 0;
+}
+
+// history call handler
+uint64
+sys_history(void) {
+  // int n;
+  // argint(0, &n);
+  argsyscallstat (SYS_history, 0, 1);
+  // int a;
+  // argint(0, &a);
+  // uint64 b;
+  // argaddr(1, &b);
+  // struct syscall_stat* st =
+  // copyout(p->pagetable, b, (char *)&st, sizeof(st)) < 0
+  return 0;
+}
+
+
+// exit call handler
+uint64
+sys_sysexit(void) {
+  stopqemu();
+  return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..4cd969b 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct syscall_stat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int history(int, struct syscall_stat*);
+void sysexit();
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..258f627 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
+entry("sysexit");
